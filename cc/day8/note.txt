Vishal sir(Q-spiders)
-----------------------------
TYPEDEF:
    Used for aliasing datatypes
        eg: typedef int x;//now x is similar to int

            x a;// a is declared as an integer variable


            typedef struct struct_name
            {


            }alias_variable

------------------------------------------------------------------------
CALL BY REFFERENCE:
    Just a another name given for existing variables with highef scope

    eg:

    void f(&c,&d)
    {
        c=30,d=40;
    }
    int main()
    {
        int a=10;b=20;
        f(a,b);
        cout<<a<<b;//30 40
    }
---------------------------------------------------------------
DERANGEMENTS:
    !n=(n-1).(!(n-1)+!(n-2))for n>=2.
    where !0=1 and !1=0

    0 - 1
    1 - 0
    2 - 1
    3 - 2
    4 - 9
    5 - 44
    6 - 265

--------------------------------------------------------------------
STRING LIBRARY FUNCTIONS:#include<string.h>

    1.strlen(s1):
            length of the string excluding '\0'
    2.strcpy(s1,s2):
            copies s2 to s1
    3.strncpy(s1,s2,n):
            copies n char from s2 to s1
    4.strcmp(s1,s2):
            compares two strings
            returns 0 when if same,else non 0(internal operation is subtraction)
    5.strncmp(s1,s2,n):
            compares first n char of s2 with s1
    6.strcat(s1,s2):
            appends s2 to s1
    7.strncat(s1,s2):
            appends first n char of s2 with s1
    8.strchr(s1,ch):
            searching for first accurance of the char in s1
            returns address of char found
          s1[]="HelloWorld"
          ch='1' 
    9.strrchr(s1,ch):
            searching for last accurance
    10.strstr(s1,s2):
        searching for sub string in main string
    11.strdup(source_string):
        strdup copies the content of source_string to a new string created by inside malloc() and this function returns the bas address of duplicate


--------------------------------------------------------------------------------
STRUCTURES:
    Collection of heterogenious elements stored in continious memory

    ->to access members of structure, we need to use dot operator [ . ]
    ->we can access member of structure,only if memory is allcated for the members
    ->memory gets allocated to all members,when we create instance or variable of structure


    syntax:

        struct struct_name
        {
            data_member1;
            data_member2;
            ---
            ---
        };

        eg:
