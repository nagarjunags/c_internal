OPERATORS:
    .   //access by object
    ->  //indirection operator//access by address(pointer to structure//???)
    Precedence:
    1.                      ()  
                            []
                            .
                            ->
  -----------------------------
    2.                    unary opeerators.
                            +  //possitive
                            -  //negate
                            ++ //(++c,c++ :: pre,post)
                                // but, for independent/standalone expression pre or opst doesnt matters 
                            -- // /
                            ~  //1's comple
                            !
                            &
                            *  //de refference operator//indirection operator
                            sizeof()/???//inside size() operator no operations will get executed not even print no assignment......
                                    // returns the memory consumed by var or datatype
                            typecast
                                        eg:
                                            i=5;
                                            i+i=10
                                            i++i=ERROR
                                            i+++i=11
                                            i++++i=ERROR
                                            i+++++i=compilerdependent



sizeof():
    returns size of parameter in bytes
    always returns unsigned integral(int,long int, ..... ) type of value(sizes can never be in -ve) 
    also called size_t  return type of sizeof() = size_t = unsigned long int

    inside sizeof no assignment / evaluation is possible
        eg: sizeof(X++);//it will not increment and x remains same






> or <
    when comparing signed and unsigned value,signed is promoted to unsigned and compared bit by bit
    


 eg:
    #include<std>
    int main()
    {
        unsigned int x=-1;
        y=~0;
        if(y == x)
            printf(same);
        else
            pf(not same);    
    }   
-------------------------------
eg:
    float x = 0.5;
    if(x == 0.5)
        printf("IF");
    else if(x == o.5f)
        pf("else if")   //    perfect fractions will be saved in same pattern in both float and double
    else
        pf("else");        

---------------------------------------------------------------------------------------------

INCREMENT and DECREMENT OPERATORS:

    pre increment
        first increment value then use
    post increment
        first use then increment 
    pre decrement
        first decrement value then use
    post decrement
        first use then decrement

    in stand alone/independent expression will be equal to pre increment 
    ->in any dependent expression all the pre increment/decrement operations will be performed before assignments
        all post inc/dec will be performed after the assignment   

NOTE:ALL the unary operator has same precedence but postfix has the greater precedence than prefix
--------------------------------------------------------------------
BINAY OPERATOR:
    ARITHEMATIC OPERAATOR:(+ - * / %)
        Precedence:
            1.          * /    (left to right)/???
            2.          %
            3.          + -
        NOTE:modulus operator only take operands in int format.
                for non int values we use fmod(x,y)//declared in math.h    


    RELATIONAL OPERATOR:output will be 0 or 1
                    >
                    <
                    >=
                    <=
                    !=
                    ==
    BITWISE OPERATOR:
                    &  (logical and has more precedence than or)
                    |
                    ^
                    ~
                    >>(PRECEDENCE IS JUST AFTER THE ARITHEMATIC OPERATOR)
                    <<
                    


                    truth table:

                    op1 op2 0r and  ^
                    0   0   0    0  0
                    0   1   1    0  1
                    1   0   1    0  1
                    1   1   1    1  0

            NOTE:
                x ^ x =0
                x ^ 0 =x

            <<       LEFT SHIFT OPERATOR: PERFORMS *2







                    NUM << BITS equivalent to (num*2^bits)

            >>       RIGHT SHIFT OPERATOR: performs /2:
                     num >> bits equivalent to num/(2^bits) 

                     while right shifting -ve numbers add 1 to void msb
                    msb is sign bit only for int not for hexa and other number system
                     eg:
                     1111 1111 1111 1011    -> -5
                        >>4
                     1111 1111 1111 1111    -> (0xffff)
                       f    f   f    f

    LOGICAL OPERATOR:

            !  // logical NOT

            && //logical AND operator:// if first operand is zero rest of te expressions are skipped

            || //logical OR Operator// if the first expression is non zero rest is skipped

            

    TERNARY OPERATOR:
        a?b:c;
        //condition?exp1:exp2;

        eg: a>b? return a : return b; //ERROR!
            return a>b? a:b;  //correct way

ASSIGNMENT OPERATOR:
            =
            (+=  -=  *=   /=   %=   &=   |=  ^=   >>=   <<=) //Shorthand assignment


COMMA OPERATOR:(seperator operator)[, :evaluates from left and provides from right]
    ,



ASSOCIATIVITY:
        UNARY , TERNARY , ASSIGNMENT -----  RIGHT TO  LEFT
        REST ALL ---------------------- LEFT  TO RIGHT
        